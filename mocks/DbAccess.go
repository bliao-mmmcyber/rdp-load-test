// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	dynamodbcli "github.com/appaegis/golang-common/pkg/dynamodbcli"

	mock "github.com/stretchr/testify/mock"
)

// DbAccess is an autogenerated mock type for the DbAccess type
type DbAccess struct {
	mock.Mock
}

// DeleteRdpSession provides a mock function with given fields: sessionId
func (_m *DbAccess) DeleteRdpSession(sessionId string) error {
	ret := _m.Called(sessionId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(sessionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetInviteeByUserIdAndSessionId provides a mock function with given fields: userId, sessionId
func (_m *DbAccess) GetInviteeByUserIdAndSessionId(userId string, sessionId string) (*dynamodbcli.ActiveRdpSessionInvitee, error) {
	ret := _m.Called(userId, sessionId)

	var r0 *dynamodbcli.ActiveRdpSessionInvitee
	if rf, ok := ret.Get(0).(func(string, string) *dynamodbcli.ActiveRdpSessionInvitee); ok {
		r0 = rf(userId, sessionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodbcli.ActiveRdpSessionInvitee)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, sessionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantById provides a mock function with given fields: tenantId
func (_m *DbAccess) GetTenantById(tenantId string) dynamodbcli.TenantEntry {
	ret := _m.Called(tenantId)

	var r0 dynamodbcli.TenantEntry
	if rf, ok := ret.Get(0).(func(string) dynamodbcli.TenantEntry); ok {
		r0 = rf(tenantId)
	} else {
		r0 = ret.Get(0).(dynamodbcli.TenantEntry)
	}

	return r0
}

// QueryUsersByTenantAndUserPrefix provides a mock function with given fields: tenantId, userPrefix
func (_m *DbAccess) QueryUsersByTenantAndUserPrefix(tenantId string, userPrefix string) ([]dynamodbcli.UserEntry, error) {
	ret := _m.Called(tenantId, userPrefix)

	var r0 []dynamodbcli.UserEntry
	if rf, ok := ret.Get(0).(func(string, string) []dynamodbcli.UserEntry); ok {
		r0 = rf(tenantId, userPrefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dynamodbcli.UserEntry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tenantId, userPrefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveInvitee provides a mock function with given fields: sessionId, user
func (_m *DbAccess) RemoveInvitee(sessionId string, user string) error {
	ret := _m.Called(sessionId, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(sessionId, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveActiveRdpSession provides a mock function with given fields: session
func (_m *DbAccess) SaveActiveRdpSession(session *dynamodbcli.ActiveRdpSession) error {
	ret := _m.Called(session)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dynamodbcli.ActiveRdpSession) error); ok {
		r0 = rf(session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShareRdpSession provides a mock function with given fields: invitee, inviteePermissions, sessionId
func (_m *DbAccess) ShareRdpSession(invitee string, inviteePermissions string, sessionId string) error {
	ret := _m.Called(invitee, inviteePermissions, sessionId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(invitee, inviteePermissions, sessionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDbAccess interface {
	mock.TestingT
	Cleanup(func())
}

// NewDbAccess creates a new instance of DbAccess. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDbAccess(t mockConstructorTestingTNewDbAccess) *DbAccess {
	mock := &DbAccess{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
